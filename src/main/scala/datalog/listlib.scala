package datalog

import datalog.dsl.Program

def listlib(program: Program): Unit = {
  val ActualArg = program.relation[String]("ActualArg")
  val ActualReturn = program.relation[String]("ActualReturn")
  val Alloc = program.relation[String]("Alloc")
  val DefinesWith = program.relation[String]("DefinesWith")
  val Extends = program.relation[String]("Extends")
  val FormalArg = program.relation[String]("FormalArg")
  val FormalReturn = program.relation[String]("FormalReturn")
  val HeapType = program.relation[String]("HeapType")
  val NotDefines = program.relation[String]("NotDefines")
  val Reachable = program.relation[String]("Reachable")
  val ThisVar = program.relation[String]("ThisVar")
  val VCall = program.relation[String]("VCall")

  val LookUp = program.relation[String]("LookUp")
  val Move = program.relation[String]("Move")
  val Store = program.relation[String]("Store")
  val Load = program.relation[String]("Load")

  val StaticCall = program.relation[String]("StaticCall")
  val StaticLookUp = program.relation[String]("StaticLookUp")

  val VarPointsTo = program.relation[String]("VarPointsTo")
  val CallGraph = program.relation[String]()
  val FldPointsTo = program.relation[String]()
  val InterProcAssign = program.relation[String]()

  val Delegate = program.relation[String]("Delegate")
  val SuperCall = program.relation[String]("SuperCall")
  val FieldValDef = program.relation[String]("FieldValDef")

  val Refers = program.relation[String]("Refers")
  val Overrides = program.relation[String]("Overrides")
  val TopLevel = program.relation[String]("TopLevel")

  ActualArg("instr#1", "list0", "arg0", "listlib.Main.writeReplace.temp#1") :- ()
  ActualArg("instr#5", "list1", "arg0", "listlib.Main.main.temp#5") :- ()
  ActualArg("instr#7", "list0", "arg0", "listlib.Main.main.temp#6") :- ()
  ActualArg("instr#4", "list1", "arg0", "listlib.Main.main.temp#7") :- ()
  ActualArg("instr#8", "list0", "arg0", "listlib.Main.main.temp#8") :- ()
  ActualArg("instr#3", "list1", "arg0", "listlib.Main.main.temp#9") :- ()
  ActualArg("instr#9", "list0", "arg0", "listlib.Main.main.temp#10") :- ()
  ActualArg("instr#2", "list1", "arg0", "listlib.Main.main.temp#11") :- ()
  ActualArg("instr#10", "list0", "arg0", "listlib.Main.main.temp#12") :- ()
  ActualArg("instr#11", "list0", "arg0", "listlib.Main.main.temp#13") :- ()
  ActualArg("instr#13", "list0", "arg0", "listlib.Main.main.range.to") :- ()
  ActualArg("instr#14", "list0", "arg0", "listlib.Main.main.range.i") :- ()
  ActualArg("instr#15", "list1", "arg0", "listlib.Main.main.range.elem$4") :- ()
  ActualArg("instr#16", "list0", "arg0", "listlib.Main.main.range.temp#1") :- ()
  ActualArg("instr#17", "list0", "arg0", "listlib.Main.main.display.temp#1") :- ()
  ActualArg("instr#18", "list0", "arg0", "listlib.Main.main.display.temp#2") :- ()
  ActualArg("instr#19", "list0", "arg0", "listlib.Main.main.display.i") :- ()
  ActualArg("instr#20", "list0", "arg0", "listlib.Main.main.display.temp#4") :- ()
  ActualArg("instr#21", "list0", "arg0", "listlib.Main.main.temp#14") :- ()
  ActualArg("instr#21", "list0", "arg1", "listlib.Main.main.temp#15") :- ()
  ActualArg("instr#22", "list0", "arg0", "listlib.Main.main.rng") :- ()
  ActualArg("instr#23", "list0", "arg0", "listlib.Main.main.temp#16") :- ()
  ActualArg("instr#23", "list0", "arg1", "listlib.Main.main.temp#17") :- ()
  ActualArg("instr#24", "list0", "arg0", "listlib.Main.main.sl") :- ()
  ActualArg("instr#27", "list1", "arg0", "listlib.SimpleList.::.elem") :- ()
  ActualArg("instr#27", "list1", "arg1", "listlib.SimpleList.::.this") :- ()
  ActualArg("instr#28", "list0", "arg0", "listlib.SimpleList.reverse.rec.temp#2") :- ()
  ActualArg("instr#29", "list0", "arg0", "listlib.SimpleList.reverse.rec.temp#3") :- ()
  ActualArg("instr#29", "list0", "arg1", "listlib.SimpleList.reverse.rec.temp#4") :- ()
  ActualArg("instr#30", "list1", "arg0", "listlib.SimpleList.reverse.rec.elem$1") :- ()
  ActualArg("instr#31", "list0", "arg0", "listlib.SimpleList.reverse.temp#1") :- ()
  ActualArg("instr#31", "list0", "arg1", "listlib.SimpleList.reverse.temp#2") :- ()
  ActualArg("instr#32", "list1", "arg0", "listlib.SimpleList.reverse.elem$2") :- ()
  ActualArg("instr#34", "list1", "arg0", "listlib.SimpleList.repeat.temp#1") :- ()
  ActualArg("instr#35", "list0", "arg0", "listlib.SimpleList.repeat.temp#2") :- ()
  ActualArg("instr#36", "list0", "arg0", "listlib.SimpleList.repeat.temp#3") :- ()
  ActualArg("instr#37", "list0", "arg0", "listlib.SimpleList.last.temp#1") :- ()
  ActualArg("instr#38", "list0", "arg0", "listlib.SimpleList.last.temp#3") :- ()
  ActualArg("instr#39", "list0", "arg0", "listlib.SimpleList.take.temp#1") :- ()
  ActualArg("instr#42", "list0", "arg0", "listlib.SimpleList.take.temp#4") :- ()
  ActualArg("instr#43", "list0", "arg0", "listlib.SimpleList.take.temp#5") :- ()
  ActualArg("instr#41", "list1", "arg0", "listlib.SimpleList.take.elem$3") :- ()
  ActualArg("instr#44", "list0", "arg0", "listlib.SimpleList.slice.temp#1") :- ()
  ActualArg("instr#45", "list0", "arg0", "listlib.SimpleList.slice.len") :- ()
  ActualArg("instr#46", "list0", "arg0", "listlib.SimpleList.slice.temp#3") :- ()
  ActualArg("instr#47", "list0", "arg0", "listlib.SimpleList.slice.temp#4") :- ()
  ActualArg("instr#46", "list0", "arg1", "listlib.SimpleList.slice.len") :- ()
  ActualArg("instr#54", "list1", "arg0", "listlib.Cons.first") :- ()
  ActualArg("instr#54", "list1", "arg1", "listlib.Cons.++.temp#1") :- ()
  ActualArg("instr#55", "list1", "arg0", "listlib.Cons.++.suffix") :- ()
  ActualArg("instr#57", "list0", "arg0", "listlib.Cons.contains.elem") :- ()
  ActualArg("instr#56", "list0", "arg0", "listlib.Cons.contains.temp#2") :- ()
  ActualArg("instr#58", "list1", "arg0", "listlib.Cons.contains.elem") :- ()
  ActualArg("instr#61", "list0", "arg0", "listlib.Cons.first") :- ()
  ActualArg("instr#60", "list0", "arg0", "listlib.Cons.str.temp#4") :- ()
  ActualArg("instr#59", "list0", "arg0", "listlib.Cons.str.temp#5") :- ()
  ActualArg("instr#62", "list0", "arg0", "listlib.Cons.size.temp#2") :- ()
  ActualArg("instr#63", "list0", "arg0", "listlib.Cons.get.temp#1") :- ()
  ActualArg("instr#64", "list0", "arg0", "listlib.Cons.get.temp#2") :- ()
  ActualArg("instr#65", "list0", "arg0", "listlib.Cons.get.temp#3") :- ()

  ActualReturn("instr#5", "listlib.Main.main.temp#3") :- ()
  ActualReturn("instr#4", "listlib.Main.main.temp#2") :- ()
  ActualReturn("instr#3", "listlib.Main.main.temp#1") :- ()
  ActualReturn("instr#2", "listlib.Main.main.l") :- ()
  ActualReturn("instr#11", "listlib.Main.main.elt") :- ()
  ActualReturn("instr#15", "listlib.Main.main.range.build") :- ()
  ActualReturn("instr#16", "listlib.Main.main.range.i") :- ()
  ActualReturn("instr#19", "listlib.Main.main.display.temp#3") :- ()
  ActualReturn("instr#20", "listlib.Main.main.display.i") :- ()
  ActualReturn("instr#21", "listlib.Main.main.rng") :- ()
  ActualReturn("instr#23", "listlib.Main.main.sl") :- ()
  ActualReturn("instr#24", "listlib.Main.main.temp") :- ()
  ActualReturn("instr#29", "listlib.SimpleList.reverse.rec.temp") :- ()
  ActualReturn("instr#30", "listlib.SimpleList.reverse.rec.temp#4") :- ()
  ActualReturn("instr#31", "listlib.SimpleList.reverse.temp") :- ()
  ActualReturn("instr#32", "listlib.SimpleList.reverse.temp#2") :- ()
  ActualReturn("instr#34", "listlib.SimpleList.repeat.temp") :- ()
  ActualReturn("instr#35", "listlib.SimpleList.repeat.temp#1") :- ()
  ActualReturn("instr#36", "listlib.SimpleList.repeat.temp#2") :- ()
  ActualReturn("instr#37", "listlib.SimpleList.last.temp") :- ()
  ActualReturn("instr#38", "listlib.SimpleList.last.temp#1") :- ()
  ActualReturn("instr#42", "listlib.SimpleList.take.temp#2") :- ()
  ActualReturn("instr#43", "listlib.SimpleList.take.temp#4") :- ()
  ActualReturn("instr#41", "listlib.SimpleList.take.temp") :- ()
  ActualReturn("instr#45", "listlib.SimpleList.slice.temp") :- ()
  ActualReturn("instr#46", "listlib.SimpleList.slice.temp") :- ()
  ActualReturn("instr#47", "listlib.SimpleList.slice.temp#3") :- ()
  ActualReturn("instr#55", "listlib.Cons.++.temp#1") :- ()
  ActualReturn("instr#57", "listlib.Cons.contains.temp#1") :- ()
  ActualReturn("instr#56", "listlib.Cons.contains.temp") :- ()
  ActualReturn("instr#58", "listlib.Cons.contains.temp#2") :- ()
  ActualReturn("instr#61", "listlib.Cons.str.temp#2") :- ()
  ActualReturn("instr#60", "listlib.Cons.str.temp#1") :- ()
  ActualReturn("instr#59", "listlib.Cons.str.temp") :- ()
  ActualReturn("instr#62", "listlib.Cons.size.temp") :- ()
  ActualReturn("instr#64", "listlib.Cons.get.temp") :- ()
  ActualReturn("instr#65", "listlib.Cons.get.temp#2") :- ()

  Alloc("listlib.Main.writeReplace.temp", "new[scala.runtime.ModuleSerializationProxy]#0", "listlib.Main.writeReplace") :- ()
  Alloc("listlib.Main.main.temp#4", "new[listlib.Empty]#1", "listlib.Main.main") :- ()
  Alloc("listlib.Main.main.temp#5", "new[listlib.IntWrap]#2", "listlib.Main.main") :- ()
  Alloc("listlib.Main.main.temp#7", "new[listlib.IntWrap]#3", "listlib.Main.main") :- ()
  Alloc("listlib.Main.main.temp#9", "new[listlib.IntWrap]#4", "listlib.Main.main") :- ()
  Alloc("listlib.Main.main.temp#11", "new[listlib.IntWrap]#5", "listlib.Main.main") :- ()
  Alloc("listlib.Main.main.range.build", "new[listlib.Empty]#6", "listlib.Main.main.range") :- ()
  Alloc("listlib.Main.main.range.elem$4", "new[listlib.IntWrap]#7", "listlib.Main.main.range") :- ()
  Alloc("listlib.SimpleList.::.temp", "new[listlib.Cons]#8", "listlib.SimpleList.::") :- ()
  Alloc("listlib.SimpleList.reverse.temp#3", "new[listlib.Empty]#9", "listlib.SimpleList.reverse") :- ()
  Alloc("listlib.SimpleList.take.temp", "new[listlib.Empty]#10", "listlib.SimpleList.take") :- ()
  Alloc("listlib.Empty.get.temp#1", "new[java.lang.Exception]#11", "listlib.Empty.get") :- ()
  Alloc("listlib.Empty.head.temp#1", "new[java.lang.Exception]#12", "listlib.Empty.head") :- ()
  Alloc("listlib.Empty.tail.temp#1", "new[java.lang.Exception]#13", "listlib.Empty.tail") :- ()
  Alloc("listlib.Cons.++.temp", "new[listlib.Cons]#14", "listlib.Cons.++") :- ()

  DefinesWith("listlib.Main", "listlib.Main.main", "listlib.Main.main") :- ()
  DefinesWith("listlib.Main", "listlib.Main.writeReplace", "listlib.Main.writeReplace") :- ()
  DefinesWith("listlib.Main", "listlib.Main.<init>", "listlib.Main.<init>") :- ()
  DefinesWith("listlib.SimpleList", "listlib.SimpleList.contains", "listlib.SimpleList.contains") :- ()
  DefinesWith("listlib.SimpleList", "listlib.SimpleList.reverse", "listlib.SimpleList.reverse") :- ()
  DefinesWith("listlib.SimpleList", "listlib.SimpleList.size", "listlib.SimpleList.size") :- ()
  DefinesWith("listlib.SimpleList", "listlib.SimpleList.++", "listlib.SimpleList.++") :- ()
  DefinesWith("listlib.SimpleList", "listlib.SimpleList.::", "listlib.SimpleList.::") :- ()
  DefinesWith("listlib.SimpleList", "listlib.SimpleList.take", "listlib.SimpleList.take") :- ()
  DefinesWith("listlib.SimpleList", "listlib.SimpleList.head", "listlib.SimpleList.head") :- ()
  DefinesWith("listlib.SimpleList", "listlib.SimpleList.repeat", "listlib.SimpleList.repeat") :- ()
  DefinesWith("listlib.SimpleList", "listlib.SimpleList.slice", "listlib.SimpleList.slice") :- ()
  DefinesWith("listlib.SimpleList", "listlib.SimpleList.get", "listlib.SimpleList.get") :- ()
  DefinesWith("listlib.SimpleList", "listlib.SimpleList.<init>", "listlib.SimpleList.<init>") :- ()
  DefinesWith("listlib.SimpleList", "listlib.SimpleList.tail", "listlib.SimpleList.tail") :- ()
  DefinesWith("listlib.SimpleList", "listlib.SimpleList.last", "listlib.SimpleList.last") :- ()
  DefinesWith("listlib.IntWrap", "listlib.IntWrap.<init>", "listlib.IntWrap.<init>") :- ()
  DefinesWith("listlib.IntWrap", "listlib.IntWrap.c", "listlib.IntWrap.c") :- ()
  DefinesWith("listlib.Printable", "listlib.Printable.str", "listlib.Printable.str") :- ()
  DefinesWith("listlib.Printable", "listlib.Printable.<init>", "listlib.Printable.<init>") :- ()
  DefinesWith("listlib.Empty", "listlib.SimpleList.contains", "listlib.Empty.contains") :- ()
  DefinesWith("listlib.Empty", "listlib.SimpleList.head", "listlib.Empty.head") :- ()
  DefinesWith("listlib.Empty", "listlib.Printable.str", "listlib.Empty.str") :- ()
  DefinesWith("listlib.Empty", "listlib.SimpleList.get", "listlib.Empty.get") :- ()
  DefinesWith("listlib.Empty", "listlib.SimpleList.size", "listlib.Empty.size") :- ()
  DefinesWith("listlib.Empty", "listlib.SimpleList.++", "listlib.Empty.++") :- ()
  DefinesWith("listlib.Empty", "listlib.Empty.<init>", "listlib.Empty.<init>") :- ()
  DefinesWith("listlib.Empty", "listlib.SimpleList.tail", "listlib.Empty.tail") :- ()
  DefinesWith("listlib.Cons", "listlib.SimpleList.contains", "listlib.Cons.contains") :- ()
  DefinesWith("listlib.Cons", "listlib.Cons.cons", "listlib.Cons.cons") :- ()
  DefinesWith("listlib.Cons", "listlib.SimpleList.head", "listlib.Cons.head") :- ()
  DefinesWith("listlib.Cons", "listlib.Printable.str", "listlib.Cons.str") :- ()
  DefinesWith("listlib.Cons", "listlib.SimpleList.get", "listlib.Cons.get") :- ()
  DefinesWith("listlib.Cons", "listlib.SimpleList.size", "listlib.Cons.size") :- ()
  DefinesWith("listlib.Cons", "listlib.SimpleList.++", "listlib.Cons.++") :- ()
  DefinesWith("listlib.Cons", "listlib.Cons.first", "listlib.Cons.first") :- ()
  DefinesWith("listlib.Cons", "listlib.Cons.<init>", "listlib.Cons.<init>") :- ()
  DefinesWith("listlib.Cons", "listlib.SimpleList.tail", "listlib.Cons.tail") :- ()

  Extends("listlib.Main", "java.lang.Object") :- ()
  Extends("listlib.SimpleList", "java.lang.Object") :- ()
  Extends("listlib.SimpleList", "listlib.Printable") :- ()
  Extends("listlib.IntWrap", "java.lang.Object") :- ()
  Extends("listlib.Printable", "java.lang.Object") :- ()
  Extends("listlib.Empty", "listlib.SimpleList") :- ()
  Extends("listlib.Cons", "listlib.SimpleList") :- ()

  FieldValDef("listlib.IntWrap.c", "listlib.IntWrap.c") :- ()
  FieldValDef("listlib.Cons.first", "listlib.Cons.first") :- ()
  FieldValDef("listlib.Cons.cons", "listlib.Cons.cons") :- ()

  FormalArg("listlib.Main.main.range", "list0", "arg0", "listlib.Main.main.range.from") :- ()
  FormalArg("listlib.Main.main.range", "list0", "arg1", "listlib.Main.main.range.to") :- ()
  FormalArg("listlib.Main.main.display", "list0", "arg0", "listlib.Main.main.display.l") :- ()
  FormalArg("listlib.SimpleList.::", "list1", "arg0", "listlib.SimpleList.::.elem") :- ()
  FormalArg("listlib.SimpleList.++", "list1", "arg0", "listlib.SimpleList.++.suffix") :- ()
  FormalArg("listlib.SimpleList.contains", "list1", "arg0", "listlib.SimpleList.contains.elem") :- ()
  FormalArg("listlib.SimpleList.get", "list0", "arg0", "listlib.SimpleList.get.i") :- ()
  FormalArg("listlib.SimpleList.reverse.rec", "list0", "arg0", "listlib.SimpleList.reverse.rec.remaining") :- ()
  FormalArg("listlib.SimpleList.reverse.rec", "list0", "arg1", "listlib.SimpleList.reverse.rec.acc") :- ()
  FormalArg("listlib.SimpleList.repeat", "list0", "arg0", "listlib.SimpleList.repeat.n") :- ()
  FormalArg("listlib.SimpleList.take", "list0", "arg0", "listlib.SimpleList.take.len") :- ()
  FormalArg("listlib.SimpleList.slice", "list0", "arg0", "listlib.SimpleList.slice.from") :- ()
  FormalArg("listlib.SimpleList.slice", "list0", "arg1", "listlib.SimpleList.slice.len") :- ()
  FormalArg("listlib.IntWrap.<init>", "list0", "arg0", "listlib.IntWrap.<init>.c") :- ()
  FormalArg("listlib.Empty.contains", "list1", "arg0", "listlib.Empty.contains.elem") :- ()
  FormalArg("listlib.Empty.++", "list1", "arg0", "listlib.Empty.++.suffix") :- ()
  FormalArg("listlib.Empty.get", "list0", "arg0", "listlib.Empty.get.i") :- ()
  FormalArg("listlib.Cons.<init>", "list1", "arg0", "listlib.Cons.<init>.first") :- ()
  FormalArg("listlib.Cons.<init>", "list1", "arg1", "listlib.Cons.<init>.cons") :- ()
  FormalArg("listlib.Cons.++", "list1", "arg0", "listlib.Cons.++.suffix") :- ()
  FormalArg("listlib.Cons.contains", "list1", "arg0", "listlib.Cons.contains.elem") :- ()
  FormalArg("listlib.Cons.get", "list0", "arg0", "listlib.Cons.get.i") :- ()

  FormalReturn("listlib.Main.writeReplace", "listlib.Main.writeReplace.temp") :- ()
  FormalReturn("listlib.Main.main", "listlib.Main.main.temp") :- ()
  FormalReturn("listlib.Main.main.range", "listlib.Main.main.range.temp") :- ()
  FormalReturn("listlib.Main.main.display", "listlib.Main.main.display.temp") :- ()
  FormalReturn("listlib.SimpleList.::", "listlib.SimpleList.::.temp") :- ()
  FormalReturn("listlib.SimpleList.reverse", "listlib.SimpleList.reverse.temp") :- ()
  FormalReturn("listlib.SimpleList.reverse.rec", "listlib.SimpleList.reverse.rec.temp") :- ()
  FormalReturn("listlib.SimpleList.repeat", "listlib.SimpleList.repeat.temp") :- ()
  FormalReturn("listlib.SimpleList.last", "listlib.SimpleList.last.temp") :- ()
  FormalReturn("listlib.SimpleList.take", "listlib.SimpleList.take.temp") :- ()
  FormalReturn("listlib.SimpleList.slice", "listlib.SimpleList.slice.temp") :- ()
  FormalReturn("listlib.Empty.contains", "listlib.Empty.contains.temp") :- ()
  FormalReturn("listlib.Empty.++", "listlib.Empty.++.suffix") :- ()
  FormalReturn("listlib.Empty.str", "listlib.Empty.str.temp") :- ()
  FormalReturn("listlib.Empty.size", "listlib.Empty.size.temp") :- ()
  FormalReturn("listlib.Empty.get", "listlib.Empty.get.temp") :- ()
  FormalReturn("listlib.Empty.head", "listlib.Empty.head.temp") :- ()
  FormalReturn("listlib.Empty.tail", "listlib.Empty.tail.temp") :- ()
  FormalReturn("listlib.Cons.++", "listlib.Cons.++.temp") :- ()
  FormalReturn("listlib.Cons.contains", "listlib.Cons.contains.temp") :- ()
  FormalReturn("listlib.Cons.str", "listlib.Cons.str.temp") :- ()
  FormalReturn("listlib.Cons.size", "listlib.Cons.size.temp") :- ()
  FormalReturn("listlib.Cons.get", "listlib.Cons.get.temp") :- ()
  FormalReturn("listlib.Cons.tail", "listlib.Cons.cons") :- ()
  FormalReturn("listlib.Cons.head", "listlib.Cons.first") :- ()

  Load("listlib.Main.main.range.temp", "listlib.Main.main.range.build", "listlib.SimpleList.reverse", "listlib.Main.main.range") :- ()
  Load("listlib.Main.main.display.temp#1", "listlib.Main.main.display.l", "listlib.SimpleList.size", "listlib.Main.main.display") :- ()
  Load("listlib.Main.main.display.temp#2", "listlib.Main.main.display.temp#3", "listlib.IntWrap.c", "listlib.Main.main.display") :- ()
  Load("listlib.SimpleList.reverse.rec.temp#1", "listlib.SimpleList.reverse.rec.remaining", "listlib.SimpleList.size", "listlib.SimpleList.reverse.rec") :- ()
  Load("listlib.SimpleList.reverse.rec.temp#3", "listlib.SimpleList.reverse.rec.remaining", "listlib.SimpleList.tail", "listlib.SimpleList.reverse.rec") :- ()
  Load("listlib.SimpleList.reverse.rec.elem$1", "listlib.SimpleList.reverse.rec.remaining", "listlib.SimpleList.head", "listlib.SimpleList.reverse.rec") :- ()
  Load("listlib.SimpleList.reverse.temp#1", "listlib.SimpleList.reverse.this", "listlib.SimpleList.tail", "listlib.SimpleList.reverse") :- ()
  Load("listlib.SimpleList.reverse.elem$2", "listlib.SimpleList.reverse.this", "listlib.SimpleList.head", "listlib.SimpleList.reverse") :- ()
  Load("listlib.SimpleList.last.temp#2", "listlib.SimpleList.last.this", "listlib.SimpleList.size", "listlib.SimpleList.last") :- ()
  Load("listlib.SimpleList.take.elem$3", "listlib.SimpleList.take.this", "listlib.SimpleList.head", "listlib.SimpleList.take") :- ()
  Load("listlib.SimpleList.take.temp#3", "listlib.SimpleList.take.this", "listlib.SimpleList.tail", "listlib.SimpleList.take") :- ()
  Load("listlib.SimpleList.slice.temp#2", "listlib.SimpleList.slice.this", "listlib.SimpleList.tail", "listlib.SimpleList.slice") :- ()
  Load("listlib.Cons.str.temp#5", "listlib.Cons.cons", "listlib.Printable.str", "listlib.Cons.str") :- ()
  Load("listlib.Cons.size.temp#2", "listlib.Cons.cons", "listlib.SimpleList.size", "listlib.Cons.size") :- ()

  Move("listlib.Main.main.range.i", "listlib.Main.main.range.from") :- ()
  Move("listlib.SimpleList.reverse.rec.temp", "listlib.SimpleList.reverse.rec.acc") :- ()
  Move("listlib.IntWrap.c", "listlib.IntWrap.<init>.c") :- ()
  Move("listlib.Cons.first", "listlib.Cons.<init>.first") :- ()
  Move("listlib.Cons.cons", "listlib.Cons.<init>.cons") :- ()
  Move("listlib.Cons.get.temp", "listlib.Cons.first") :- ()

  NotDefines("listlib.Main", "scala.Any.asInstanceOf") :- ()
  NotDefines("listlib.Main", "scala.Any.equals") :- ()
  NotDefines("listlib.Main", "scala.Any.isInstanceOf") :- ()
  NotDefines("listlib.Main", "scala.Any.##") :- ()
  NotDefines("listlib.Main", "scala.Any.$asInstanceOf$") :- ()
  NotDefines("listlib.Main", "scala.Any.getClass") :- ()
  NotDefines("listlib.Main", "scala.Any.!=") :- ()
  NotDefines("listlib.Main", "scala.Any.==") :- ()
  NotDefines("listlib.Main", "scala.Any.$isInstanceOf$") :- ()
  NotDefines("listlib.Main", "scala.Any.asInstanceOf") :- ()
  NotDefines("listlib.Main", "scala.Any.equals") :- ()
  NotDefines("listlib.Main", "scala.Any.isInstanceOf") :- ()
  NotDefines("listlib.Main", "scala.Any.##") :- ()
  NotDefines("listlib.Main", "scala.Any.$asInstanceOf$") :- ()
  NotDefines("listlib.Main", "scala.Any.getClass") :- ()
  NotDefines("listlib.Main", "scala.Any.!=") :- ()
  NotDefines("listlib.Main", "scala.Any.==") :- ()
  NotDefines("listlib.Main", "scala.Any.$isInstanceOf$") :- ()
  NotDefines("listlib.Main", "java.lang.Object.finalize") :- ()
  NotDefines("listlib.Main", "java.lang.Object.notifyAll") :- ()
  NotDefines("listlib.Main", "java.lang.Object.equals") :- ()
  NotDefines("listlib.Main", "java.lang.Object.ne") :- ()
  NotDefines("listlib.Main", "java.lang.Object.getClass") :- ()
  NotDefines("listlib.Main", "java.lang.Object.notify") :- ()
  NotDefines("listlib.Main", "java.lang.Object.hashCode") :- ()
  NotDefines("listlib.Main", "java.lang.Object.<init>") :- ()
  NotDefines("listlib.Main", "java.lang.Object.toString") :- ()
  NotDefines("listlib.Main", "java.lang.Object.clone") :- ()
  NotDefines("listlib.Main", "java.lang.Object.wait") :- ()
  NotDefines("listlib.Main", "java.lang.Object.wait#1") :- ()
  NotDefines("listlib.Main", "java.lang.Object.wait#2") :- ()
  NotDefines("listlib.Main", "java.lang.Object.synchronized") :- ()
  NotDefines("listlib.Main", "java.lang.Object.eq") :- ()
  NotDefines("listlib.SimpleList", "scala.Any.asInstanceOf") :- ()
  NotDefines("listlib.SimpleList", "scala.Any.equals") :- ()
  NotDefines("listlib.SimpleList", "scala.Any.isInstanceOf") :- ()
  NotDefines("listlib.SimpleList", "scala.Any.##") :- ()
  NotDefines("listlib.SimpleList", "scala.Any.$asInstanceOf$") :- ()
  NotDefines("listlib.SimpleList", "scala.Any.getClass") :- ()
  NotDefines("listlib.SimpleList", "scala.Any.!=") :- ()
  NotDefines("listlib.SimpleList", "scala.Any.==") :- ()
  NotDefines("listlib.SimpleList", "scala.Any.$isInstanceOf$") :- ()
  NotDefines("listlib.SimpleList", "scala.Any.asInstanceOf") :- ()
  NotDefines("listlib.SimpleList", "scala.Any.equals") :- ()
  NotDefines("listlib.SimpleList", "scala.Any.isInstanceOf") :- ()
  NotDefines("listlib.SimpleList", "scala.Any.##") :- ()
  NotDefines("listlib.SimpleList", "scala.Any.$asInstanceOf$") :- ()
  NotDefines("listlib.SimpleList", "scala.Any.getClass") :- ()
  NotDefines("listlib.SimpleList", "scala.Any.!=") :- ()
  NotDefines("listlib.SimpleList", "scala.Any.==") :- ()
  NotDefines("listlib.SimpleList", "scala.Any.$isInstanceOf$") :- ()
  NotDefines("listlib.SimpleList", "java.lang.Object.finalize") :- ()
  NotDefines("listlib.SimpleList", "java.lang.Object.notifyAll") :- ()
  NotDefines("listlib.SimpleList", "java.lang.Object.equals") :- ()
  NotDefines("listlib.SimpleList", "java.lang.Object.ne") :- ()
  NotDefines("listlib.SimpleList", "java.lang.Object.getClass") :- ()
  NotDefines("listlib.SimpleList", "java.lang.Object.notify") :- ()
  NotDefines("listlib.SimpleList", "java.lang.Object.hashCode") :- ()
  NotDefines("listlib.SimpleList", "java.lang.Object.<init>") :- ()
  NotDefines("listlib.SimpleList", "java.lang.Object.toString") :- ()
  NotDefines("listlib.SimpleList", "java.lang.Object.clone") :- ()
  NotDefines("listlib.SimpleList", "java.lang.Object.wait") :- ()
  NotDefines("listlib.SimpleList", "java.lang.Object.wait#1") :- ()
  NotDefines("listlib.SimpleList", "java.lang.Object.wait#2") :- ()
  NotDefines("listlib.SimpleList", "java.lang.Object.synchronized") :- ()
  NotDefines("listlib.SimpleList", "java.lang.Object.eq") :- ()
  NotDefines("listlib.SimpleList", "scala.Any.asInstanceOf") :- ()
  NotDefines("listlib.SimpleList", "scala.Any.equals") :- ()
  NotDefines("listlib.SimpleList", "scala.Any.isInstanceOf") :- ()
  NotDefines("listlib.SimpleList", "scala.Any.##") :- ()
  NotDefines("listlib.SimpleList", "scala.Any.$asInstanceOf$") :- ()
  NotDefines("listlib.SimpleList", "scala.Any.getClass") :- ()
  NotDefines("listlib.SimpleList", "scala.Any.!=") :- ()
  NotDefines("listlib.SimpleList", "scala.Any.==") :- ()
  NotDefines("listlib.SimpleList", "scala.Any.$isInstanceOf$") :- ()
  NotDefines("listlib.SimpleList", "scala.Any.asInstanceOf") :- ()
  NotDefines("listlib.SimpleList", "scala.Any.equals") :- ()
  NotDefines("listlib.SimpleList", "scala.Any.isInstanceOf") :- ()
  NotDefines("listlib.SimpleList", "scala.Any.##") :- ()
  NotDefines("listlib.SimpleList", "scala.Any.$asInstanceOf$") :- ()
  NotDefines("listlib.SimpleList", "scala.Any.getClass") :- ()
  NotDefines("listlib.SimpleList", "scala.Any.!=") :- ()
  NotDefines("listlib.SimpleList", "scala.Any.==") :- ()
  NotDefines("listlib.SimpleList", "scala.Any.$isInstanceOf$") :- ()
  NotDefines("listlib.SimpleList", "java.lang.Object.finalize") :- ()
  NotDefines("listlib.SimpleList", "java.lang.Object.notifyAll") :- ()
  NotDefines("listlib.SimpleList", "java.lang.Object.equals") :- ()
  NotDefines("listlib.SimpleList", "java.lang.Object.ne") :- ()
  NotDefines("listlib.SimpleList", "java.lang.Object.getClass") :- ()
  NotDefines("listlib.SimpleList", "java.lang.Object.notify") :- ()
  NotDefines("listlib.SimpleList", "java.lang.Object.hashCode") :- ()
  NotDefines("listlib.SimpleList", "java.lang.Object.<init>") :- ()
  NotDefines("listlib.SimpleList", "java.lang.Object.toString") :- ()
  NotDefines("listlib.SimpleList", "java.lang.Object.clone") :- ()
  NotDefines("listlib.SimpleList", "java.lang.Object.wait") :- ()
  NotDefines("listlib.SimpleList", "java.lang.Object.wait#1") :- ()
  NotDefines("listlib.SimpleList", "java.lang.Object.wait#2") :- ()
  NotDefines("listlib.SimpleList", "java.lang.Object.synchronized") :- ()
  NotDefines("listlib.SimpleList", "java.lang.Object.eq") :- ()
  NotDefines("listlib.SimpleList", "listlib.Printable.str") :- ()
  NotDefines("listlib.SimpleList", "listlib.Printable.<init>") :- ()
  NotDefines("listlib.IntWrap", "scala.Any.asInstanceOf") :- ()
  NotDefines("listlib.IntWrap", "scala.Any.equals") :- ()
  NotDefines("listlib.IntWrap", "scala.Any.isInstanceOf") :- ()
  NotDefines("listlib.IntWrap", "scala.Any.##") :- ()
  NotDefines("listlib.IntWrap", "scala.Any.$asInstanceOf$") :- ()
  NotDefines("listlib.IntWrap", "scala.Any.getClass") :- ()
  NotDefines("listlib.IntWrap", "scala.Any.!=") :- ()
  NotDefines("listlib.IntWrap", "scala.Any.==") :- ()
  NotDefines("listlib.IntWrap", "scala.Any.$isInstanceOf$") :- ()
  NotDefines("listlib.IntWrap", "scala.Any.asInstanceOf") :- ()
  NotDefines("listlib.IntWrap", "scala.Any.equals") :- ()
  NotDefines("listlib.IntWrap", "scala.Any.isInstanceOf") :- ()
  NotDefines("listlib.IntWrap", "scala.Any.##") :- ()
  NotDefines("listlib.IntWrap", "scala.Any.$asInstanceOf$") :- ()
  NotDefines("listlib.IntWrap", "scala.Any.getClass") :- ()
  NotDefines("listlib.IntWrap", "scala.Any.!=") :- ()
  NotDefines("listlib.IntWrap", "scala.Any.==") :- ()
  NotDefines("listlib.IntWrap", "scala.Any.$isInstanceOf$") :- ()
  NotDefines("listlib.IntWrap", "java.lang.Object.finalize") :- ()
  NotDefines("listlib.IntWrap", "java.lang.Object.notifyAll") :- ()
  NotDefines("listlib.IntWrap", "java.lang.Object.equals") :- ()
  NotDefines("listlib.IntWrap", "java.lang.Object.ne") :- ()
  NotDefines("listlib.IntWrap", "java.lang.Object.getClass") :- ()
  NotDefines("listlib.IntWrap", "java.lang.Object.notify") :- ()
  NotDefines("listlib.IntWrap", "java.lang.Object.hashCode") :- ()
  NotDefines("listlib.IntWrap", "java.lang.Object.<init>") :- ()
  NotDefines("listlib.IntWrap", "java.lang.Object.toString") :- ()
  NotDefines("listlib.IntWrap", "java.lang.Object.clone") :- ()
  NotDefines("listlib.IntWrap", "java.lang.Object.wait") :- ()
  NotDefines("listlib.IntWrap", "java.lang.Object.wait#1") :- ()
  NotDefines("listlib.IntWrap", "java.lang.Object.wait#2") :- ()
  NotDefines("listlib.IntWrap", "java.lang.Object.synchronized") :- ()
  NotDefines("listlib.IntWrap", "java.lang.Object.eq") :- ()
  NotDefines("listlib.Printable", "scala.Any.asInstanceOf") :- ()
  NotDefines("listlib.Printable", "scala.Any.equals") :- ()
  NotDefines("listlib.Printable", "scala.Any.isInstanceOf") :- ()
  NotDefines("listlib.Printable", "scala.Any.##") :- ()
  NotDefines("listlib.Printable", "scala.Any.$asInstanceOf$") :- ()
  NotDefines("listlib.Printable", "scala.Any.getClass") :- ()
  NotDefines("listlib.Printable", "scala.Any.!=") :- ()
  NotDefines("listlib.Printable", "scala.Any.==") :- ()
  NotDefines("listlib.Printable", "scala.Any.$isInstanceOf$") :- ()
  NotDefines("listlib.Printable", "scala.Any.asInstanceOf") :- ()
  NotDefines("listlib.Printable", "scala.Any.equals") :- ()
  NotDefines("listlib.Printable", "scala.Any.isInstanceOf") :- ()
  NotDefines("listlib.Printable", "scala.Any.##") :- ()
  NotDefines("listlib.Printable", "scala.Any.$asInstanceOf$") :- ()
  NotDefines("listlib.Printable", "scala.Any.getClass") :- ()
  NotDefines("listlib.Printable", "scala.Any.!=") :- ()
  NotDefines("listlib.Printable", "scala.Any.==") :- ()
  NotDefines("listlib.Printable", "scala.Any.$isInstanceOf$") :- ()
  NotDefines("listlib.Printable", "java.lang.Object.finalize") :- ()
  NotDefines("listlib.Printable", "java.lang.Object.notifyAll") :- ()
  NotDefines("listlib.Printable", "java.lang.Object.equals") :- ()
  NotDefines("listlib.Printable", "java.lang.Object.ne") :- ()
  NotDefines("listlib.Printable", "java.lang.Object.getClass") :- ()
  NotDefines("listlib.Printable", "java.lang.Object.notify") :- ()
  NotDefines("listlib.Printable", "java.lang.Object.hashCode") :- ()
  NotDefines("listlib.Printable", "java.lang.Object.<init>") :- ()
  NotDefines("listlib.Printable", "java.lang.Object.toString") :- ()
  NotDefines("listlib.Printable", "java.lang.Object.clone") :- ()
  NotDefines("listlib.Printable", "java.lang.Object.wait") :- ()
  NotDefines("listlib.Printable", "java.lang.Object.wait#1") :- ()
  NotDefines("listlib.Printable", "java.lang.Object.wait#2") :- ()
  NotDefines("listlib.Printable", "java.lang.Object.synchronized") :- ()
  NotDefines("listlib.Printable", "java.lang.Object.eq") :- ()
  NotDefines("listlib.Empty", "scala.Any.asInstanceOf") :- ()
  NotDefines("listlib.Empty", "scala.Any.equals") :- ()
  NotDefines("listlib.Empty", "scala.Any.isInstanceOf") :- ()
  NotDefines("listlib.Empty", "scala.Any.##") :- ()
  NotDefines("listlib.Empty", "scala.Any.$asInstanceOf$") :- ()
  NotDefines("listlib.Empty", "scala.Any.getClass") :- ()
  NotDefines("listlib.Empty", "scala.Any.!=") :- ()
  NotDefines("listlib.Empty", "scala.Any.==") :- ()
  NotDefines("listlib.Empty", "scala.Any.$isInstanceOf$") :- ()
  NotDefines("listlib.Empty", "scala.Any.asInstanceOf") :- ()
  NotDefines("listlib.Empty", "scala.Any.equals") :- ()
  NotDefines("listlib.Empty", "scala.Any.isInstanceOf") :- ()
  NotDefines("listlib.Empty", "scala.Any.##") :- ()
  NotDefines("listlib.Empty", "scala.Any.$asInstanceOf$") :- ()
  NotDefines("listlib.Empty", "scala.Any.getClass") :- ()
  NotDefines("listlib.Empty", "scala.Any.!=") :- ()
  NotDefines("listlib.Empty", "scala.Any.==") :- ()
  NotDefines("listlib.Empty", "scala.Any.$isInstanceOf$") :- ()
  NotDefines("listlib.Empty", "java.lang.Object.finalize") :- ()
  NotDefines("listlib.Empty", "java.lang.Object.notifyAll") :- ()
  NotDefines("listlib.Empty", "java.lang.Object.equals") :- ()
  NotDefines("listlib.Empty", "java.lang.Object.ne") :- ()
  NotDefines("listlib.Empty", "java.lang.Object.getClass") :- ()
  NotDefines("listlib.Empty", "java.lang.Object.notify") :- ()
  NotDefines("listlib.Empty", "java.lang.Object.hashCode") :- ()
  NotDefines("listlib.Empty", "java.lang.Object.<init>") :- ()
  NotDefines("listlib.Empty", "java.lang.Object.toString") :- ()
  NotDefines("listlib.Empty", "java.lang.Object.clone") :- ()
  NotDefines("listlib.Empty", "java.lang.Object.wait") :- ()
  NotDefines("listlib.Empty", "java.lang.Object.wait#1") :- ()
  NotDefines("listlib.Empty", "java.lang.Object.wait#2") :- ()
  NotDefines("listlib.Empty", "java.lang.Object.synchronized") :- ()
  NotDefines("listlib.Empty", "java.lang.Object.eq") :- ()
  NotDefines("listlib.Empty", "scala.Any.asInstanceOf") :- ()
  NotDefines("listlib.Empty", "scala.Any.equals") :- ()
  NotDefines("listlib.Empty", "scala.Any.isInstanceOf") :- ()
  NotDefines("listlib.Empty", "scala.Any.##") :- ()
  NotDefines("listlib.Empty", "scala.Any.$asInstanceOf$") :- ()
  NotDefines("listlib.Empty", "scala.Any.getClass") :- ()
  NotDefines("listlib.Empty", "scala.Any.!=") :- ()
  NotDefines("listlib.Empty", "scala.Any.==") :- ()
  NotDefines("listlib.Empty", "scala.Any.$isInstanceOf$") :- ()
  NotDefines("listlib.Empty", "scala.Any.asInstanceOf") :- ()
  NotDefines("listlib.Empty", "scala.Any.equals") :- ()
  NotDefines("listlib.Empty", "scala.Any.isInstanceOf") :- ()
  NotDefines("listlib.Empty", "scala.Any.##") :- ()
  NotDefines("listlib.Empty", "scala.Any.$asInstanceOf$") :- ()
  NotDefines("listlib.Empty", "scala.Any.getClass") :- ()
  NotDefines("listlib.Empty", "scala.Any.!=") :- ()
  NotDefines("listlib.Empty", "scala.Any.==") :- ()
  NotDefines("listlib.Empty", "scala.Any.$isInstanceOf$") :- ()
  NotDefines("listlib.Empty", "java.lang.Object.finalize") :- ()
  NotDefines("listlib.Empty", "java.lang.Object.notifyAll") :- ()
  NotDefines("listlib.Empty", "java.lang.Object.equals") :- ()
  NotDefines("listlib.Empty", "java.lang.Object.ne") :- ()
  NotDefines("listlib.Empty", "java.lang.Object.getClass") :- ()
  NotDefines("listlib.Empty", "java.lang.Object.notify") :- ()
  NotDefines("listlib.Empty", "java.lang.Object.hashCode") :- ()
  NotDefines("listlib.Empty", "java.lang.Object.<init>") :- ()
  NotDefines("listlib.Empty", "java.lang.Object.toString") :- ()
  NotDefines("listlib.Empty", "java.lang.Object.clone") :- ()
  NotDefines("listlib.Empty", "java.lang.Object.wait") :- ()
  NotDefines("listlib.Empty", "java.lang.Object.wait#1") :- ()
  NotDefines("listlib.Empty", "java.lang.Object.wait#2") :- ()
  NotDefines("listlib.Empty", "java.lang.Object.synchronized") :- ()
  NotDefines("listlib.Empty", "java.lang.Object.eq") :- ()
  NotDefines("listlib.Empty", "listlib.Printable.<init>") :- ()
  NotDefines("listlib.Empty", "listlib.SimpleList.reverse") :- ()
  NotDefines("listlib.Empty", "listlib.SimpleList.::") :- ()
  NotDefines("listlib.Empty", "listlib.SimpleList.take") :- ()
  NotDefines("listlib.Empty", "listlib.SimpleList.repeat") :- ()
  NotDefines("listlib.Empty", "listlib.SimpleList.slice") :- ()
  NotDefines("listlib.Empty", "listlib.SimpleList.<init>") :- ()
  NotDefines("listlib.Empty", "listlib.SimpleList.last") :- ()
  NotDefines("listlib.Cons", "scala.Any.asInstanceOf") :- ()
  NotDefines("listlib.Cons", "scala.Any.equals") :- ()
  NotDefines("listlib.Cons", "scala.Any.isInstanceOf") :- ()
  NotDefines("listlib.Cons", "scala.Any.##") :- ()
  NotDefines("listlib.Cons", "scala.Any.$asInstanceOf$") :- ()
  NotDefines("listlib.Cons", "scala.Any.getClass") :- ()
  NotDefines("listlib.Cons", "scala.Any.!=") :- ()
  NotDefines("listlib.Cons", "scala.Any.==") :- ()
  NotDefines("listlib.Cons", "scala.Any.$isInstanceOf$") :- ()
  NotDefines("listlib.Cons", "scala.Any.asInstanceOf") :- ()
  NotDefines("listlib.Cons", "scala.Any.equals") :- ()
  NotDefines("listlib.Cons", "scala.Any.isInstanceOf") :- ()
  NotDefines("listlib.Cons", "scala.Any.##") :- ()
  NotDefines("listlib.Cons", "scala.Any.$asInstanceOf$") :- ()
  NotDefines("listlib.Cons", "scala.Any.getClass") :- ()
  NotDefines("listlib.Cons", "scala.Any.!=") :- ()
  NotDefines("listlib.Cons", "scala.Any.==") :- ()
  NotDefines("listlib.Cons", "scala.Any.$isInstanceOf$") :- ()
  NotDefines("listlib.Cons", "java.lang.Object.finalize") :- ()
  NotDefines("listlib.Cons", "java.lang.Object.notifyAll") :- ()
  NotDefines("listlib.Cons", "java.lang.Object.equals") :- ()
  NotDefines("listlib.Cons", "java.lang.Object.ne") :- ()
  NotDefines("listlib.Cons", "java.lang.Object.getClass") :- ()
  NotDefines("listlib.Cons", "java.lang.Object.notify") :- ()
  NotDefines("listlib.Cons", "java.lang.Object.hashCode") :- ()
  NotDefines("listlib.Cons", "java.lang.Object.<init>") :- ()
  NotDefines("listlib.Cons", "java.lang.Object.toString") :- ()
  NotDefines("listlib.Cons", "java.lang.Object.clone") :- ()
  NotDefines("listlib.Cons", "java.lang.Object.wait") :- ()
  NotDefines("listlib.Cons", "java.lang.Object.wait#1") :- ()
  NotDefines("listlib.Cons", "java.lang.Object.wait#2") :- ()
  NotDefines("listlib.Cons", "java.lang.Object.synchronized") :- ()
  NotDefines("listlib.Cons", "java.lang.Object.eq") :- ()
  NotDefines("listlib.Cons", "scala.Any.asInstanceOf") :- ()
  NotDefines("listlib.Cons", "scala.Any.equals") :- ()
  NotDefines("listlib.Cons", "scala.Any.isInstanceOf") :- ()
  NotDefines("listlib.Cons", "scala.Any.##") :- ()
  NotDefines("listlib.Cons", "scala.Any.$asInstanceOf$") :- ()
  NotDefines("listlib.Cons", "scala.Any.getClass") :- ()
  NotDefines("listlib.Cons", "scala.Any.!=") :- ()
  NotDefines("listlib.Cons", "scala.Any.==") :- ()
  NotDefines("listlib.Cons", "scala.Any.$isInstanceOf$") :- ()
  NotDefines("listlib.Cons", "scala.Any.asInstanceOf") :- ()
  NotDefines("listlib.Cons", "scala.Any.equals") :- ()
  NotDefines("listlib.Cons", "scala.Any.isInstanceOf") :- ()
  NotDefines("listlib.Cons", "scala.Any.##") :- ()
  NotDefines("listlib.Cons", "scala.Any.$asInstanceOf$") :- ()
  NotDefines("listlib.Cons", "scala.Any.getClass") :- ()
  NotDefines("listlib.Cons", "scala.Any.!=") :- ()
  NotDefines("listlib.Cons", "scala.Any.==") :- ()
  NotDefines("listlib.Cons", "scala.Any.$isInstanceOf$") :- ()
  NotDefines("listlib.Cons", "java.lang.Object.finalize") :- ()
  NotDefines("listlib.Cons", "java.lang.Object.notifyAll") :- ()
  NotDefines("listlib.Cons", "java.lang.Object.equals") :- ()
  NotDefines("listlib.Cons", "java.lang.Object.ne") :- ()
  NotDefines("listlib.Cons", "java.lang.Object.getClass") :- ()
  NotDefines("listlib.Cons", "java.lang.Object.notify") :- ()
  NotDefines("listlib.Cons", "java.lang.Object.hashCode") :- ()
  NotDefines("listlib.Cons", "java.lang.Object.<init>") :- ()
  NotDefines("listlib.Cons", "java.lang.Object.toString") :- ()
  NotDefines("listlib.Cons", "java.lang.Object.clone") :- ()
  NotDefines("listlib.Cons", "java.lang.Object.wait") :- ()
  NotDefines("listlib.Cons", "java.lang.Object.wait#1") :- ()
  NotDefines("listlib.Cons", "java.lang.Object.wait#2") :- ()
  NotDefines("listlib.Cons", "java.lang.Object.synchronized") :- ()
  NotDefines("listlib.Cons", "java.lang.Object.eq") :- ()
  NotDefines("listlib.Cons", "listlib.Printable.<init>") :- ()
  NotDefines("listlib.Cons", "listlib.SimpleList.reverse") :- ()
  NotDefines("listlib.Cons", "listlib.SimpleList.::") :- ()
  NotDefines("listlib.Cons", "listlib.SimpleList.take") :- ()
  NotDefines("listlib.Cons", "listlib.SimpleList.repeat") :- ()
  NotDefines("listlib.Cons", "listlib.SimpleList.slice") :- ()
  NotDefines("listlib.Cons", "listlib.SimpleList.<init>") :- ()
  NotDefines("listlib.Cons", "listlib.SimpleList.last") :- ()

  Reachable("listlib.Main.main") :- ()

  StaticCall("scala.Predef.println", "instr#18", "listlib.Main.main.display") :- ()
  StaticCall("listlib.Main.main.range", "instr#21", "listlib.Main.main") :- ()
  StaticCall("listlib.Main.main.display", "instr#22", "listlib.Main.main") :- ()
  StaticCall("listlib.Main.main.display", "instr#24", "listlib.Main.main") :- ()
  StaticCall("listlib.SimpleList.reverse.rec", "instr#29", "listlib.SimpleList.reverse.rec") :- ()
  StaticCall("listlib.SimpleList.reverse.rec", "instr#31", "listlib.SimpleList.reverse") :- ()

  ThisVar("listlib.Main.<init>", "listlib.Main.<init>.this") :- ()
  ThisVar("listlib.Main.writeReplace", "listlib.Main.writeReplace.this") :- ()
  ThisVar("listlib.Main.main", "listlib.Main.main.this") :- ()
  ThisVar("listlib.SimpleList.<init>", "listlib.SimpleList.<init>.this") :- ()
  ThisVar("listlib.SimpleList.::", "listlib.SimpleList.::.this") :- ()
  ThisVar("listlib.SimpleList.++", "listlib.SimpleList.++.this") :- ()
  ThisVar("listlib.SimpleList.contains", "listlib.SimpleList.contains.this") :- ()
  ThisVar("listlib.SimpleList.size", "listlib.SimpleList.size.this") :- ()
  ThisVar("listlib.SimpleList.get", "listlib.SimpleList.get.this") :- ()
  ThisVar("listlib.SimpleList.head", "listlib.SimpleList.head.this") :- ()
  ThisVar("listlib.SimpleList.tail", "listlib.SimpleList.tail.this") :- ()
  ThisVar("listlib.SimpleList.reverse", "listlib.SimpleList.reverse.this") :- ()
  ThisVar("listlib.SimpleList.repeat", "listlib.SimpleList.repeat.this") :- ()
  ThisVar("listlib.SimpleList.last", "listlib.SimpleList.last.this") :- ()
  ThisVar("listlib.SimpleList.take", "listlib.SimpleList.take.this") :- ()
  ThisVar("listlib.SimpleList.slice", "listlib.SimpleList.slice.this") :- ()
  ThisVar("listlib.IntWrap.<init>", "listlib.IntWrap.<init>.this") :- ()
  ThisVar("listlib.Printable.<init>", "listlib.Printable.<init>.this") :- ()
  ThisVar("listlib.Printable.str", "listlib.Printable.str.this") :- ()
  ThisVar("listlib.Empty.<init>", "listlib.Empty.<init>.this") :- ()
  ThisVar("listlib.Empty.contains", "listlib.Empty.contains.this") :- ()
  ThisVar("listlib.Empty.++", "listlib.Empty.++.this") :- ()
  ThisVar("listlib.Empty.str", "listlib.Empty.str.this") :- ()
  ThisVar("listlib.Empty.size", "listlib.Empty.size.this") :- ()
  ThisVar("listlib.Empty.get", "listlib.Empty.get.this") :- ()
  ThisVar("listlib.Empty.head", "listlib.Empty.head.this") :- ()
  ThisVar("listlib.Empty.tail", "listlib.Empty.tail.this") :- ()
  ThisVar("listlib.Cons.<init>", "listlib.Cons.<init>.this") :- ()
  ThisVar("listlib.Cons.++", "listlib.Cons.++.this") :- ()
  ThisVar("listlib.Cons.contains", "listlib.Cons.contains.this") :- ()
  ThisVar("listlib.Cons.str", "listlib.Cons.str.this") :- ()
  ThisVar("listlib.Cons.size", "listlib.Cons.size.this") :- ()
  ThisVar("listlib.Cons.get", "listlib.Cons.get.this") :- ()
  ThisVar("listlib.Cons.tail", "listlib.Cons.tail.this") :- ()
  ThisVar("listlib.Cons.head", "listlib.Cons.head.this") :- ()

  VCall("listlib.Main.<init>.this", "java.lang.Object.<init>", "instr#0", "listlib.Main.<init>") :- ()
  VCall("listlib.Main.writeReplace.temp", "scala.runtime.ModuleSerializationProxy.<init>", "instr#1", "listlib.Main.writeReplace") :- ()
  VCall("listlib.Main.main.temp#1", "listlib.SimpleList.::", "instr#2", "listlib.Main.main") :- ()
  VCall("listlib.Main.main.temp#2", "listlib.SimpleList.::", "instr#3", "listlib.Main.main") :- ()
  VCall("listlib.Main.main.temp#3", "listlib.SimpleList.::", "instr#4", "listlib.Main.main") :- ()
  VCall("listlib.Main.main.temp#4", "listlib.SimpleList.::", "instr#5", "listlib.Main.main") :- ()
  VCall("listlib.Main.main.temp#4", "listlib.Empty.<init>", "instr#6", "listlib.Main.main") :- ()
  VCall("listlib.Main.main.temp#5", "listlib.IntWrap.<init>", "instr#7", "listlib.Main.main") :- ()
  VCall("listlib.Main.main.temp#7", "listlib.IntWrap.<init>", "instr#8", "listlib.Main.main") :- ()
  VCall("listlib.Main.main.temp#9", "listlib.IntWrap.<init>", "instr#9", "listlib.Main.main") :- ()
  VCall("listlib.Main.main.temp#11", "listlib.IntWrap.<init>", "instr#10", "listlib.Main.main") :- ()
  VCall("listlib.Main.main.l", "listlib.Cons.get", "instr#11", "listlib.Main.main") :- ()
  VCall("listlib.Main.main.range.build", "listlib.Empty.<init>", "instr#12", "listlib.Main.main.range") :- ()
  VCall("listlib.Main.main.range.i", "scala.Int.<", "instr#13", "listlib.Main.main.range") :- ()
  VCall("listlib.Main.main.range.elem$4", "listlib.IntWrap.<init>", "instr#14", "listlib.Main.main.range") :- ()
  VCall("listlib.Main.main.range.build", "listlib.SimpleList.::", "instr#15", "listlib.Main.main.range") :- ()
  VCall("listlib.Main.main.range.i", "scala.Int.+", "instr#16", "listlib.Main.main.range") :- ()
  VCall("listlib.Main.main.display.i", "scala.Int.<", "instr#17", "listlib.Main.main.display") :- ()
  VCall("listlib.Main.main.display.l", "listlib.SimpleList.get", "instr#19", "listlib.Main.main.display") :- ()
  VCall("listlib.Main.main.display.i", "scala.Int.+", "instr#20", "listlib.Main.main.display") :- ()
  VCall("listlib.Main.main.rng", "listlib.SimpleList.slice", "instr#23", "listlib.Main.main") :- ()
  VCall("listlib.SimpleList.<init>.this", "java.lang.Object.<init>", "instr#25", "listlib.SimpleList.<init>") :- ()
  VCall("listlib.SimpleList.<init>.this", "listlib.Printable.<init>", "instr#26", "listlib.SimpleList.<init>") :- ()
  VCall("listlib.SimpleList.::.temp", "listlib.Cons.<init>", "instr#27", "listlib.SimpleList.::") :- ()
  VCall("listlib.SimpleList.reverse.rec.temp#1", "scala.Int.==", "instr#28", "listlib.SimpleList.reverse.rec") :- ()
  VCall("listlib.SimpleList.reverse.rec.acc", "listlib.SimpleList.::", "instr#30", "listlib.SimpleList.reverse.rec") :- ()
  VCall("listlib.SimpleList.reverse.temp#3", "listlib.SimpleList.::", "instr#32", "listlib.SimpleList.reverse") :- ()
  VCall("listlib.SimpleList.reverse.temp#3", "listlib.Empty.<init>", "instr#33", "listlib.SimpleList.reverse") :- ()
  VCall("listlib.SimpleList.repeat.this", "listlib.SimpleList.++", "instr#34", "listlib.SimpleList.repeat") :- ()
  VCall("listlib.SimpleList.repeat.this", "listlib.SimpleList.repeat", "instr#35", "listlib.SimpleList.repeat") :- ()
  VCall("listlib.SimpleList.repeat.n", "scala.Int.-", "instr#36", "listlib.SimpleList.repeat") :- ()
  VCall("listlib.SimpleList.last.this", "listlib.SimpleList.get", "instr#37", "listlib.SimpleList.last") :- ()
  VCall("listlib.SimpleList.last.temp#2", "scala.Int.-", "instr#38", "listlib.SimpleList.last") :- ()
  VCall("listlib.SimpleList.take.len", "scala.Int.==", "instr#39", "listlib.SimpleList.take") :- ()
  VCall("listlib.SimpleList.take.temp", "listlib.Empty.<init>", "instr#40", "listlib.SimpleList.take") :- ()
  VCall("listlib.SimpleList.take.temp#2", "listlib.SimpleList.::", "instr#41", "listlib.SimpleList.take") :- ()
  VCall("listlib.SimpleList.take.temp#3", "listlib.SimpleList.take", "instr#42", "listlib.SimpleList.take") :- ()
  VCall("listlib.SimpleList.take.len", "scala.Int.-", "instr#43", "listlib.SimpleList.take") :- ()
  VCall("listlib.SimpleList.slice.from", "scala.Int.==", "instr#44", "listlib.SimpleList.slice") :- ()
  VCall("listlib.SimpleList.slice.this", "listlib.SimpleList.take", "instr#45", "listlib.SimpleList.slice") :- ()
  VCall("listlib.SimpleList.slice.temp#2", "listlib.SimpleList.slice", "instr#46", "listlib.SimpleList.slice") :- ()
  VCall("listlib.SimpleList.slice.from", "scala.Int.-", "instr#47", "listlib.SimpleList.slice") :- ()
  VCall("listlib.IntWrap.<init>.this", "java.lang.Object.<init>", "instr#48", "listlib.IntWrap.<init>") :- ()
  VCall("listlib.Empty.<init>.this", "listlib.SimpleList.<init>", "instr#49", "listlib.Empty.<init>") :- ()
  VCall("listlib.Empty.get.temp#1", "java.lang.Exception.<init>", "instr#50", "listlib.Empty.get") :- ()
  VCall("listlib.Empty.head.temp#1", "java.lang.Exception.<init>", "instr#51", "listlib.Empty.head") :- ()
  VCall("listlib.Empty.tail.temp#1", "java.lang.Exception.<init>", "instr#52", "listlib.Empty.tail") :- ()
  VCall("listlib.Cons.<init>.this", "listlib.SimpleList.<init>", "instr#53", "listlib.Cons.<init>") :- ()
  VCall("listlib.Cons.++.temp", "listlib.Cons.<init>", "instr#54", "listlib.Cons.++") :- ()
  VCall("listlib.Cons.cons", "listlib.SimpleList.++", "instr#55", "listlib.Cons.++") :- ()
  VCall("listlib.Cons.contains.temp#1", "scala.Boolean.||", "instr#56", "listlib.Cons.contains") :- ()
  VCall("listlib.Cons.first", "scala.Any.==", "instr#57", "listlib.Cons.contains") :- ()
  VCall("listlib.Cons.cons", "listlib.SimpleList.contains", "instr#58", "listlib.Cons.contains") :- ()
  VCall("listlib.Cons.str.temp#1", "java.lang.String.+", "instr#59", "listlib.Cons.str") :- ()
  VCall("listlib.Cons.str.temp#2", "java.lang.String.+", "instr#60", "listlib.Cons.str") :- ()
  VCall("listlib.Cons.str.temp#3", "java.lang.String.+", "instr#61", "listlib.Cons.str") :- ()
  VCall("listlib.Cons.size.temp#1", "scala.Int.+", "instr#62", "listlib.Cons.size") :- ()
  VCall("listlib.Cons.get.i", "scala.Int.==", "instr#63", "listlib.Cons.get") :- ()
  VCall("listlib.Cons.cons", "listlib.SimpleList.get", "instr#64", "listlib.Cons.get") :- ()
  VCall("listlib.Cons.get.i", "scala.Int.-", "instr#65", "listlib.Cons.get") :- ()

  val varr, heap, meth, to, from, base, baseH, fld, ref = program.variable()
  val toMeth, thiss, thisFrom, invo, sig, inMeth, heapT, m, n, actualFld = program.variable()
  val classA, classB, classC, sigA, sigB, sigC = program.variable()

  VarPointsTo(varr, heap) :- (Reachable(meth), Alloc(varr, heap, meth))
  VarPointsTo(to, heap) :- (Move(to, from), VarPointsTo(from, heap))
  FldPointsTo(baseH, fld, heap) :- (Store(base, fld, from), VarPointsTo(from, heap), VarPointsTo(base, baseH))
  VarPointsTo(to, heap) :- (Load(to, base, fld, inMeth), VarPointsTo(base, baseH), FldPointsTo(baseH, fld, heap))

  Reachable(toMeth) :-
    (VCall(base, sig, invo, inMeth), Reachable(inMeth),
      VarPointsTo(base, heap),
      HeapType(heap, heapT), LookUp(heapT, sig, toMeth),
      ThisVar(toMeth, thiss))

  VarPointsTo(thiss, heap) :-
    (VCall(base, sig, invo, inMeth), Reachable(inMeth),
      VarPointsTo(base, heap),
      HeapType(heap, heapT), LookUp(heapT, sig, toMeth),
      ThisVar(toMeth, thiss))

  CallGraph(invo, toMeth) :-
    (VCall(base, sig, invo, inMeth), Reachable(inMeth),
      VarPointsTo(base, heap),
      HeapType(heap, heapT), LookUp(heapT, sig, toMeth),
      ThisVar(toMeth, thiss))

  // rules for dynamic val
  Reachable(toMeth) :-
    (Load(to, base, sig, inMeth), Reachable(inMeth),
      VarPointsTo(base, heap),
      HeapType(heap, heapT), LookUp(heapT, sig, toMeth),
      ThisVar(toMeth, thiss),
      FormalReturn(toMeth, from))

  VarPointsTo(thiss, heap) :-
    (Load(to, base, sig, inMeth), Reachable(inMeth),
      VarPointsTo(base, heap),
      HeapType(heap, heapT), LookUp(heapT, sig, toMeth),
      ThisVar(toMeth, thiss),
      FormalReturn(toMeth, from))

  InterProcAssign(to, from) :-
    (Load(to, base, sig, inMeth), Reachable(inMeth),
      VarPointsTo(base, heap),
      HeapType(heap, heapT), LookUp(heapT, sig, toMeth),
      ThisVar(toMeth, thiss),
      FormalReturn(toMeth, from))

  InterProcAssign(to, from) :- (CallGraph(invo, meth), FormalArg(meth, m, n, to), ActualArg(invo, m, n, from))

  InterProcAssign(to, from) :- (CallGraph(invo, meth), FormalReturn(meth, from), ActualReturn(invo, to))

  VarPointsTo(to, heap) :- (InterProcAssign(to, from), VarPointsTo(from, heap))

  Reachable(toMeth) :- (StaticCall(toMeth, invo, inMeth), Reachable(inMeth))

  CallGraph(invo, toMeth) :- (StaticCall(toMeth, invo, inMeth), Reachable(inMeth))

  // without negation support, we generate NotDefines facts
  LookUp(classC, sig, meth) :- DefinesWith(classC, sig, meth)
  LookUp(classC, sigA, sigB) :- (LookUp(classB, sigA, sigB), NotDefines(classC, sigB), Extends(classC, classB))
  DefinesWith(classC, sigA, sigC) :- (DefinesWith(classC, sigB, sigC), DefinesWith(classB, sigA, sigB))
  DefinesWith(classC, sigC, sigC) :- DefinesWith(classC, sigB, sigC)

  // with negations we would have something like:
  // LookUp(classC, sig, meth) :- DefinesWith(classC, sig, meth)
  // LookUp(classC, sigA, sigB) :- (LookUp(classB, sigA, sigB), Not(Defines(classC, sigB)), Extends(classC, classB))
  // DefinesWith(classC, sigA, sigC) :- (DefinesWith(classC, sigB, sigC), DefinesWith(classB, sigA, sigB))
  // DefinesWith(classC, sigC, sigC) :- DefinesWith(classC, sigB, sigC)
  // Defines(classC, sigA) :- DefinesWith(classC, sigA, sigC)

  // super calls
  Reachable(toMeth) :-
    (SuperCall(toMeth, invo, inMeth), Reachable(inMeth),
      ThisVar(inMeth, thisFrom), VarPointsTo(thisFrom, heap),
      ThisVar(toMeth, thiss))

  VarPointsTo(thiss, heap) :-
    (SuperCall(toMeth, invo, inMeth), Reachable(inMeth),
      ThisVar(inMeth, thisFrom), VarPointsTo(thisFrom, heap),
      ThisVar(toMeth, thiss))

  CallGraph(invo, toMeth) :-
    (SuperCall(toMeth, invo, inMeth), Reachable(inMeth),
      ThisVar(inMeth, thisFrom), VarPointsTo(thisFrom, heap),
      ThisVar(toMeth, thiss))

  VarPointsTo(to, heap) :-
    (Load(to, base, fld, inMeth), VarPointsTo(base, baseH),
      HeapType(baseH, heapT), LookUp(heapT, fld, actualFld),
      FieldValDef(actualFld, from),
      VarPointsTo(from, heap))

  println(s"RES=${VarPointsTo.solve().size}")
}
